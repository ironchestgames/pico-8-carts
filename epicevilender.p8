pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- epic evil ender
-- by ironchest games

poke(24365,1) -- note: enable devkit
isdebug=false

printh('debug started','debug',true)
function debug(_s1,_s2,_s3,_s4,_s5,_s6,_s7,_s8)
 local ss={_s2,_s3,_s4,_s5,_s6,_s7,_s8}
 local result=tostr(_s1)
 for s in all(ss) do
  result=result..', '..tostr(s)
 end
 printh(result,'debug',false)
end



function isaabbscolliding(aabb1,aabb2)
 return aabb1.x - aabb1.halfw < aabb2.x + aabb2.halfw and
        aabb1.x + aabb1.halfw > aabb2.x - aabb2.halfw and
        aabb1.y - aabb1.halfh < aabb2.y + aabb2.halfh and
        aabb1.y + aabb1.halfh > aabb2.y - aabb2.halfh
end

wallaabb={
 x=0,
 y=0,
 halfw=4,
 halfh=4,
}
function isinsidewall(aabb,floormap)
 for _y=0,#floormap do
  for _x=0,#floormap[_y] do
   if floormap[_y][_x] == 1 then
    wallaabb.x=_x*8+wallaabb.halfw
    wallaabb.y=_y*8+wallaabb.halfh
    if isaabbscolliding(aabb,wallaabb) then
     return true
    end
   end
  end
 end
 return false
end

function haslos(x0,y0,x1,y1) -- todo: refactor names to start at index 1
 local result={}
 local dx=abs(x1-x0)
 local dy=abs(y1-y0)
 local x=x0
 local y=y0
 local n=1+dx+dy
 local x_inc=-1
 if x1 > x0 then
  x_inc=1
 end

 local y_inc=-1
 if y1 > y0 then
  y_inc=1
 end

 local error=dx-dy
 dx*=2
 dy*=2

 while (n > 0) do
  n-=1

  if floormap[flr(y/8)][flr(x/8)] == 1 then
   return false
  end

  if isdebug == true then
   pset(x,y,3)
  end

  if error > 0 then
   x+=x_inc
   error-=dy
  else
   y+=y_inc
   error+=dx
  end
 end
 return true
end

function dist(x1,y1,x2,y2)
 local dx=x2-x1
 local dy=y2-y1
 return sqrt(dx*dx+dy*dy)
end

function normalize(n)
 if n > 0 then
  return 1
 elseif n < 0 then
  return -1
 end
 return 0
end

function copytable(t)
 local newt={}
 for key,value in pairs(t) do
  newt[key]=value
 end
 return newt
end

btnmasktoangle={
 [2]=0, -- right
 [6]=0.125, -- right/up
 [4]=0.25, -- up
 [5]=0.375, -- up/left
 [1]=0.5, -- left
 [9]=0.625, -- left/down
 [8]=0.75, -- down
 [10]=0.875, -- down/right
}

function floormapcollision(_floormap,aabb,dx,dy)
 local _dx,_dy=dx,dy

 -- next pos with new x
 local newaabb=copytable(aabb)
 newaabb.x+=_dx

 -- is it inside wall?
 if isinsidewall(newaabb,_floormap) then
  _dx=0
 end

 -- reset x and set new y
 newaabb=copytable(aabb)
 newaabb.y+=_dy

 -- is it inside wall?
 if isinsidewall(newaabb,_floormap) then
  _dy=0
 end

 return _dx,_dy
end

floormap={} -- the current map
avatar={} -- avatar actor handle
actors={} -- actors

function createactor(params) -- note: mutates params

 -- state
 params.state='idling'
 params.state_counter=0

 -- movement
 params.dx=0
 params.dy=0

 return params
end

function updateavatarstate(avatar)
 if avatar.state_counter > 0 then
  avatar.state_counter-=1
  if avatar.state_counter <= 0 then
   if avatar.state == 'attacking' then
    avatar.state='idling'
   end
  end
 end
end

aimodes={
 normal=function(actor)

  local ai=actor.ai
  local newstate='idling'

  -- prio 1 - check for los to avatar
  if haslos(actor.x,actor.y,avatar.x,avatar.y) then
   ai.targetx=avatar.x
   ai.targety=avatar.y
   actor.state='moving'

  else
   ai.targetx=nil
   ai.targety=nil
   actor.state='idling'
  end

  -- perform
  ai[actor.state](actor)

 end,
}

aibehaviours={

 standingstill=function(actor)
  actor.dx=0
  actor.dy=0
 end,

 movingtotarget=function(actor)
  local a=atan2(actor.ai.targetx-actor.x,actor.ai.targety-actor.y)
  actor.dx=cos(a)*actor.spd
  actor.dy=sin(a)*actor.spd
 end,
}


function _init()

 -- reset collections
 floormap={}
 actors={}

 -- init floormap
 for _y=0,15 do
  floormap[_y]={}
  for _x=0,16 do
   local _col=sget(_x,64+_y)

   -- create avatar
   if _col == 15 then
    avatar=createactor({
     x=_x*8,
     y=_y*8,
     halfw=1.5,
     halfh=2,
     a=0,
     spd=0.5,
    })
    add(actors,avatar)
    _col=0 -- note: make tile ground
   end

   -- create skeleton enemy
   if _col == 6 then
    local enemy=createactor({
     isenemy=true,
     x=_x*8,
     y=_y*8,
     halfw=1.5,
     halfh=2,
     spd=0.25,
     ai={
      update=aimodes.normal,
      moving=aibehaviours.movingtotarget,
      idling=aibehaviours.standingstill,
     },
    })

    add(actors,enemy)
    _col=0 -- note: make tile ground
   end

   -- set floormap value
   floormap[_y][_x]=_col
  end
 end
end

function _update60()

 --note: devkit debug
 if stat(30)==true then
  c=stat(31)
  if c == 'd' then
   isdebug=not isdebug
   debug('isdebug',isdebug)
  end
 end

 -- consider input
 local angle=btnmasktoangle[btn()]
 if angle != nil then
  avatar.a=angle
  avatar.dx=normalize(cos(avatar.a))
  avatar.dy=normalize(sin(avatar.a))
 else
  avatar.dx=0
  avatar.dy=0
 end

 -- consider attack input
 if btnp(4) and
    (avatar.state == 'idling' or
     avatar.state == 'moving') then
  avatar.state='attacking'
  avatar.state_counter=8

  -- todo: create attack object
 end

 -- update current state counter
 updateavatarstate(avatar)

 -- ai to make decisions
 for actor in all(actors) do
  if actor.ai != nil then
   actor.ai.update(actor)
  end
 end

 -- movement check against floormap
 for actor in all(actors) do

  -- calc wanted movement
  local nextdx=actor.dx*actor.spd
  local nextdy=actor.dy*actor.spd

  -- collide against floor and get possible movement
  local _dx,_dy=floormapcollision(
    floormap,
    actor,
    nextdx,
    nextdy)

  -- set actor pos based on possible movement
  actor.x+=_dx
  actor.y+=_dy
 end

 -- collide against attacks


end


function _draw()
 cls()

 -- draw walls
 for _y=0,#floormap do
  for _x=0,#floormap[_y] do
   local mapval=floormap[_y][_x]
   if mapval != 0 then
    spr(0,_x*8,_y*8)
   end
  end
 end

 -- todo: sort on y and z
 --       maybe z can be layers?
 --       per z add 128 (plus margin)
 --       to y when sorting

 -- draw actors
 for actor in all(actors) do
  rectfill(
   actor.x-actor.halfw,
   actor.y-actor.halfh,
   actor.x+actor.halfw,
   actor.y+actor.halfh,
   10)

  if isdebug then
   if actor.ai and actor.ai.targetx then
    haslos(actor.x,actor.y,actor.ai.targetx,actor.ai.targety)
   end

   pset(actor.x,actor.y,12)
  end

 end
end


__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01101111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
01001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11011011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10010011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0f00f000000000000000000700000000777700000007777700000007777000000007000000000000000000000000000000000000000000000000000000000000
55555500000000000000000070000000007770000077777777000077700000000070000000000000000000000000000000000000000000000000000000000000
05005000000000000000000070000000000777000070000000700777000000000070000000000000000000000000000000000000000000000000000000000000
5050500000000000000f000077000000f007700000000f000000007700f000000770000f000000700000f000000000000f000000000000f00000700000000000
00000000000000000665566077000066556600000066555600000006655660000770665566000070066556600000006655660000000066556600700000000000
00000000000000000665000777000066500000000000056600000000005660000777000566000077000056600000000005660000000066500007700000000000
06006000000000000050507777000005050000000000505000000000050500000777705050000077770505000000000050500000000005050777700000000000
66666600000000000000000000000000000000000000000000000000000000000000000000000007770000000000070000000700000000000777000000000000
06006000000000000000000000000000000000000000000000000000000000000000000000000000700000000000077777777000000000000070000000000000
60606000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007777700000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
100000000f0011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000000000011110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000100000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10060100060006010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000100000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000100000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10010100000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10010100000111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10010000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000060006000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
10000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
