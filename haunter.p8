pico-8 cartridge // http://www.pico-8.com
version 36
__lua__

printh('debug started','debug',true)
function debug(s)
 printh(tostr(s),'debug',false)
end


-- set auto-repeat delay for btnp
poke(0x5f5c, 5)

player1={x=8,y=8}

floor={}
fog={}
arslen=255

for _i=0,arslen do
 fog[_i]=1
 floor[_i]=1
 local _x,_y=_i&15,_i\16

 if rnd() > 0.75 or _x == 0 or _x == 15 or _y == 0 or _y == 15 then
  floor[_i]=2
 end
end
floor[player1.y*16+player1.x]=1
_playerpos=player1.y*16+player1.x

ais={}

while #ais < 2 do
 local _pos=flr(rnd(arslen))
 if floor[_pos] == 1 and _pos != _playerpos then
  local _x,_y=_pos&15,_pos\16
  add(ais,{
   x=_x,
   y=_y,
   typ='stationary',
   })
 end
end


local function roundtiesup(_n)
 return flr(_n+0.5)
end

local function roundtiesdown(_n)
 return -flr(-(_n-0.5))
end

local function newrow(_depth,_startslope,_endslope)
 return {
  depth=_depth,
  startslope=_startslope,
  endslope=_endslope,
 }
end

local function gettiles(_row)
 local _mincol=roundtiesup(_row.depth*_row.startslope)
 local _maxcol=roundtiesdown(_row.depth*_row.endslope)
 local _tiles={}
 for _col=_mincol,_maxcol do
  add(_tiles,{row=_row.depth,col=_col})
 end
 return _tiles
end

local function nextrow(_row)
 return newrow(_row.depth+1,_row.startslope,_row.endslope)
end

local function isnotoffpremises(_x,_y)
 return _x < 16 and _x >= 0 and _y < 16 and _x >= 0
end

local function slope(_tile)
 return (2*_tile.col-1)/(2*_tile.row)
end

local function issymmetric(_row,_tile)
 return _tile.col >= _row.depth * _row.startslope and _tile.col <= _row.depth * _row.endslope
end

local function getdirtransform(_dir,_tile,_guy)
 -- todo: change to pico dirs
 local _c,_r=_tile.col,_tile.row
 if _dir == 0 then
  return _guy.x+_c,_guy.y-_r
 elseif _dir == 1 then
  return _guy.x+_r,_guy.y+_c
 elseif _dir == 2 then
  return _guy.x+_c,_guy.y+_r
 elseif _dir == 3 then
  return _guy.x-_r,_guy.y+_c
 end
end

local function reveal(_tile,_dir,_guy)
 local _x,_y=getdirtransform(_dir,_tile,_guy)
 if isnotoffpremises(_x,_y) then
  fog[_y*16+_x]=0
 end
end

local function iswall(_tile,_dir,_guy)
 if _tile then
  local _x,_y=getdirtransform(_dir,_tile,_guy)
  return floor[_y*16+_x] == 2
 end
end

local function isfloor(_tile,_dir,_guy)
 if _tile then
  local _x,_y=getdirtransform(_dir,_tile,_guy)
  local _f=floor[_y*16+_x]
  return _f == 0 or _f == 1
 end
end

local function scan(_row1,_dir,_guy)
 local _rows={_row1}
 while #_rows > 0 do
  local _row=deli(_rows,#_rows)
  local _prevtile
  local _tiles=gettiles(_row)
  for _tile in all(_tiles) do
   if iswall(_tile,_dir,_guy) or issymmetric(_row,_tile) then
    reveal(_tile,_dir,_guy)
   end
   if iswall(_prevtile,_dir,_guy) and isfloor(_tile,_dir,_guy) then
    _row.startslope=slope(_tile)
   end
   if isfloor(_prevtile,_dir,_guy) and iswall(_tile,_dir,_guy) then
    local _nextrow=nextrow(_row)
    _nextrow.endslope=slope(_tile)
    add(_rows,_nextrow)
   end
   _prevtile=_tile
  end
  if isfloor(_prevtile,_dir,_guy) then
   local _nextrow=nextrow(_row)
   add(_rows,_nextrow)
  end
 end
end

function torch()

end

d=1

function _update()
 
 for _i=0,arslen do
  fog[_i]=1
 end

 local _nextx,_nexty=player1.x,player1.y

 if btnp(0) then
  _nextx-=1
 end
 if btnp(1) then
  _nextx+=1
 end
 if btnp(2) then
  _nexty-=1
 end
 if btnp(3) then
  _nexty+=1
 end

 if btnp(0,1) then
  d=3
 end
 if btnp(1,1) then
  d=1
 end
 if btnp(2,1) then
  d=0
 end
 if btnp(3,1) then
  d=2
 end

 if floor[_nexty*16+_nextx] == 2 then
  _nextx=player1.x
  _nexty=player1.y
 end

 player1.x,player1.y=_nextx,_nexty

 local _firstrow=newrow(1,-1,1)
 scan(_firstrow,d,ais[1])


 local _firstrow=newrow(1,-1,1)
 scan(_firstrow,d,ais[2])

 -- for _dir=0,3 do
 --  local _firstrow=newrow(1,-1,1)
 --  scan(_firstrow,_dir,ais[1])
 -- end

end

function _draw()
 cls(0)

 -- draw floor
 for _i=0,arslen do
  local _x,_y=_i&15,_i\16
  local _f=(floor[_i]-1)*2
  spr(_f+fog[_i],_x*8,_y*8)
 end

 -- draw ais
 for _ai in all(ais) do
  rectfill(_ai.x*8,_ai.y*8,_ai.x*8+7,_ai.y*8+7,6)
 end

 -- draw avatar
 spr(16+fog[player1.y*16+player1.x],player1.x*8,player1.y*8)

end

__gfx__
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000004444444422222222000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1ddddd11055555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11ddddd1005555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11d7d7d1005757500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11d7d7d1005757500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11ddddd1005555500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11dddd11005555000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1ddd1111055500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11141141000200200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11144441000222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1144e4e1002282800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
14444441022222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
14444441022222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
14444441022222200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
14141141020200200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111f111000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
1111f111000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11144111000110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11144f11000112000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11555111001110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111511000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111511000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
