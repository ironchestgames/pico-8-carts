pico-8 cartridge // http://www.pico-8.com
version 18
__lua__

printh('debug started','debug',true)
function debug(_s1,_s2,_s3,_s4,_s5,_s6,_s7,_s8)
 local ss={_s2,_s3,_s4,_s5,_s6,_s7,_s8}
 local result=tostr(_s1)
 for s in all(ss) do
  result=result..', '..tostr(s)
 end
 printh(result,'debug',false)
end

function dist(x1,y1,x2,y2)
 local dx=(x2-x1)*0.1
 local dy=(y2-y1)*0.1
 return sqrt(dx*dx+dy*dy)*10
end

function acos(x)
 return atan2(x,-sqrt(1-x*x))
end

function asin(y)
 return atan2(sqrt(1-y*y),-y)
end

function lookupfrommap(u,v)
 return sget(u,v)
end

function flrrnd(x)
 return flr(rnd(x))
end

function genmap(z,w)
 ::o::
 q=rnd(1)
 d=1500+rnd(2000)
 v=rnd(1)
 j=100+rnd(250)
 h={}
 for x=0,w*2 do
  for y=0,w do
   h[x+y*z]=0
  end
 end
 for i=0,j do
  x=flrrnd(z)
  y=flrrnd(z)
  h[x+y*z]=1
 end
 for i=0,d do
  x=1+flrrnd((w*2)-1)
  y=1+flrrnd(w-1)
  p=y+1
  k=y-1   
  m=x+1
  n=x-1
  if h[x+y*z] > 0 then
   h[x+y*z]+=v
   h[n+y*z]+=q
   h[m+y*z]+=q
   h[x+k*z]+=q
   h[x+p*z]+=q
   h[m+p*z]+=q
   h[m+k*z]+=q
   h[n+p*z]+=q
   h[n+k*z]+=q
  end
 end
 u=0
 u+=1
 k=mid(3,flrrnd(6),6)
 c={}
 while k > 0 do
  c[k]=flrrnd(15)+1
  k=k-1
 end
 for x=0,w*2 do
  for y=0,w do
  i=mid(1,flr(h[x+y*z])+1,#c)
  col=c[i]
  sset(x,y,col)
  end
 end
 if (u>7) goto o
end

stars={}
t=0
colshade={1,1,1,2,1,13,6,2,4,4,3,13,1,2,4}
mapheight=32
mapheight_h=mapheight/2
mapheight_2=mapheight*2
rotationspeed=0.1

_update=function()
 t=t+1

 if btnp(4) then
  _init()
 end

 if btnp(5) then
  sset(flrrnd(64),flrrnd(32),5)
 end

 for star in all(stars) do
  star[1]=star[1]+star[3]
  if star[1] < 0 then
   star[1]=128
  end
  if star[1] > 128 then
   star[1]=0
  end
 end
end

_draw=function()
 cls()

 for star in all(stars) do
  pset(star[1],star[2],1)
 end

 -- iterate over each pixel in the discsize x discsize bounding square
 for x=left,left_ds do
  for y=top,top_ds do

   -- convert pixel position into a vector relative to the center,
   -- normalized into the range -1...1
   local px=(x-left)*2/discsize-1
   local py=(y-top)*2/discsize-1
   local pypy=py*py

   -- get the squared magnitude of this vector
   local magsq=px*px+pypy

   -- if we're outside the circle, draw black/background and skip ahead
   if magsq > 1 then
    pset(x,y,0)
   else

    -- warp our local offset vector px py to imitate 3d bulge
    widthatheight=sqrt(1-pypy)
    px=asin(px/widthatheight)*4

    -- convert our local offsets into lookup coordinates into our map texture
    u=t*rotationspeed+(px+1)*(mapheight/2) 
    v=(py+1)*(mapheight/2)
    -- wrap the horizontal coordinate around our map when it goes off the edge
    u=u%(2*mapheight)

    -- look up the corresponding colour from the map texture & plot it
    c=lookupfrommap(u,v)
    if dist(x+discsize_h,y+discsize_h,shadeleft,shadetop) > shadesize then
     c=colshade[c]
    end
    pset(x,y,c)
   end
  end
 end

 sspr(0,0,64,32,32,96)

 print(stat(2),0,0,7) -- note: cpu usage
end

_init=function()
 local c=20
 local starspeed=max(0.03,rnd(0.3))
 while c > 0 do
  stars[c]={flr(rnd(128)),rnd(128),starspeed}
  c=c-1
 end

 cls()
 genmap(64,32)

 discsize=flr((flrrnd(22)+22)/2)*2+1
 discsize_h=discsize/2
 left=64-discsize_h
 top=left
 shadeleft=64+discsize_h-discsize_h/8
 shadetop=shadeleft
 shadesize=discsize_h-discsize_h/12
 left_ds=left+discsize
 top_ds=top+discsize
end

__gfx__
77777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777711111177777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77777711117777777777777777177771717777111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
77111111111171111111777771111111111111111111111111111111111111770000000000000000000000000000000000000000000000000000000000000000
11111777777777771117777171117111111111111111111777111111171111110000000000000000000000000000000000000000000000000000000000000000
11177717757757717117777711171111133331113557777337333111111111110000000000000000000000000000000000000000000000000000000000000000
11777775555555555111777711111111333333335533333333333333333311110000000000000000000000000000000000000000000000000000000000000000
11111355533335555111371111111111333333113533333333333333333311110000000000000000000000000000000000000000000000000000000000000000
11113353333333333313331111111111331331151353533333333333333333110000000000000000000000000000000000000000000000000000000000000000
11333335533333333313311111111133333333553535335555555555553111110000000000000000000000000000000000000000000000000000000000000000
11133555333333333313311111133333333353333335555353335333331111110000000000000000000000000000000000000000000000000000000000000000
1113555533f333333111111131333333333355333355555553333333331111110000000000000000000000000000000000000000000000000000000000000000
111ff3333ff31111111111111111333313335333555555553331333ff31111110000000000000000000000000000000000000000000000000000000000000000
1111ffff33311111111111111111111111133155555553533353ffff331111110000000000000000000000000000000000000000000000000000000000000000
111113ffff11111111111111111ff1113133335555ffffff555fff33333111110000000000000000000000000000000000000000000000000000000000000000
11111111fff111111111111111fff113f1ffffffffffffffffff3333553311110000000000000000000000000000000000000000000000000000000000000000
111111111f5311111111111113fff3ffff1111fffffffffffff33355333311110000000000000000000000000000000000000000000000000000000000000000
131111113f533131311113113fffffffff3111fffffffffffff33113333311110000000000000000000000000000000000000000000000000000000000000000
111111113353333111111111fffffffffff1111111fffffffff31111133311110000000000000000000000000000000000000000000000000000000000000000
1111111133533331111111113333333fffff11111111ff331ff11111111131110000000000000000000000000000000000000000000000000000000000000000
1111111133531311111111111133333333ff11111111113333111111113111110000000000000000000000000000000000000000000000000000000000000000
11111111133331111111111111113333333311111113111331111111111333110000000000000000000000000000000000000000000000000000000000000000
31111111113331111111111111111333333311111111111131111111111111110000000000000000000000000000000000000000000000000000000000000000
33111111111331111111111111111333333113111111111111111111111133330000000000000000000000000000000000000000000000000000000000000000
33111111111131111111111111111133333113111111111111111111111333330000000000000000000000000000000000000000000000000000000000000000
33111111111111111111111111111113331111111111111111111111111111130000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111111111111111111111111111110000000000000000000000000000000000000000000000000000000000000000
11111111111111111111111111111111111111777777111111177777777111110000000000000000000000000000000000000000000000000000000000000000
11111111111177777777777111111177777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
77777777777777777777777777777777777777777777777777777777777777770000000000000000000000000000000000000000000000000000000000000000
