pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- virtuous vanquisher of evil 2.0-alpha
-- by ironchest games

cartdata'ironchestgames_vvoe2_v1_dev1'

printh('debug started','debug',true)
function debug(s)
 printh(tostr(s),'debug',false)
end

poke(0x5f5c, -1) -- set auto-repeat delay for btnp

btnmasktoa=split'0.5,0,,0.25,0.375,0.125,,0.75,0.625,0.875'
confusedbtnmasktoa=split'0,0.5,,0.75,0.875,0.625,,0.25,0.125,0.375'

-- [0x0001]=0.5, -- left
-- [0x0002]=0, -- right
-- [0x0004]=0.25, -- up
-- [0x0005]=0.375, -- up/left
-- [0x0006]=0.125, -- right/up
-- [0x0008]=0.75, -- down
-- [0x0009]=0.625, -- left/down
-- [0x000a]=0.875, -- down/right

function flrrnd(_n)
 return flr(rnd(_n))
end

function norm(n)
 return n == 0 and 0 or sgn(n)
end

function atodirections(_a)
 return flr((_a%1)*8)/8 -- todo: maybe %1 is not needed
end

function tconcat(_t1,_t2)
 local _t={}
 for _i in all(_t1) do
  add(_t,_i)
 end
 for _i in all(_t2) do
  add(_t,_i)
 end
 return _t
end

-- collision funcs

function isaabbscolliding(a,b)
 return a.x-a.hw < b.x+b.hw and a.x+a.hw > b.x-b.hw and
  a.y-a.hh < b.y+b.hh and a.y+a.hh > b.y-b.hh and b
end

isinsidewall_wallabb={hw=4,hh=4}
function isinsidewall(aabb)
 local x1,y1,x2,y2=
  aabb.x-aabb.hw,aabb.y-aabb.hh,
  aabb.x+aabb.hw,aabb.y+aabb.hh

 for p in all{{x1,y1},{x2,y1},{x2,y2},{x1,y2}} do
  local mapx,mapy=flr(p[1]/8),flr(p[2]/8)
  isinsidewall_wallabb.x,isinsidewall_wallabb.y=mapx*8+isinsidewall_wallabb.hw,mapy*8+isinsidewall_wallabb.hh

  -- note: hitboxes should not be larger than 8x8
  if not walls[mapy] or not walls[mapy][mapx] then
   -- aabb.removeme=true
   debug('warn - inside wall! should not happen')
  elseif walls[mapy][mapx] != 0 and isaabbscolliding(aabb,isinsidewall_wallabb) then
   return isinsidewall_wallabb
  end
 end

 for _dw in all(dynwalls) do
  if isaabbscolliding(aabb,_dw) then
   return _dw
  end
 end
end

collideaabbs_aabb={}
function collideaabbs(_func,_aabb,_other,_dx,_dy)
 local _sgndx,_sgndy=sgn(_dx),sgn(_dy)
 collideaabbs_aabb.x,
 collideaabbs_aabb.y,
 collideaabbs_aabb.hw,
 collideaabbs_aabb.hh=
  _aabb.x+_dx,
  _aabb.y,
  _aabb.hw,
  _aabb.hh

 local _collidedwith=_func(collideaabbs_aabb,_other)
 if _collidedwith then
  _dx=(_aabb.hw+_collidedwith.hw-abs(_aabb.x-_collidedwith.x))*-_sgndx
 end

 collideaabbs_aabb.x,collideaabbs_aabb.y=_aabb.x,_aabb.y+_dy
 _collidedwith=_func(collideaabbs_aabb,_other)
 if _collidedwith then
  _dy=(_aabb.hh+_collidedwith.hh-abs(_aabb.y-_collidedwith.y))*-_sgndy
 end

 return _dx,_dy
end

function dist(x1,y1,x2,y2)
 local dx,dy=x2-x1,y2-y1
 return sqrt(dx*dx+dy*dy)
end

function haslos(_x1,_y1,_x2,_y2)
 local dx,dy,x,y,xinc,yinc=
  abs(_x2-_x1),abs(_y2-_y1),_x1,_y1,sgn(_x2-_x1),sgn(_y2-_y1)
 local n,err=1+dx+dy,dx-dy
 dx*=2
 dy*=2

 while n > 0 do
  n-=1
  if walls[flr(y/8)][flr(x/8)] != 0 then
   return
  end
  if err > 0 then
   x+=xinc
   err-=dy
  else
   y+=yinc
   err+=dx
  end
 end
 return true
end

-- drawing funcs

function sortony(_t)
 for _i=1,#_t do
  local _j=_i
  while _j > 1 and _t[_j-1].y+(_t[_j-1].hh or 4) > _t[_j].y+(_t[_j].hh or 4) do -- todo: make cleaner
   _t[_j],_t[_j-1]=_t[_j-1],_t[_j]
   _j=_j-1
  end
 end
end

function drawactor(_a)
 pal(_a.colors,0)
 spr(_a.s[flr(_a.f)],_a.x-4,_a.y-(8-_a.hh),1,1,_a.sflip)
 pal()
end

function getfxcolor(_fx)
 return _fx.colors[flr(#_fx.colors*((_fx.dur-_fx.durc)/_fx.dur))+1]
end

function drawfx(_fx)
 pal(1,getfxcolor(_fx))
 spr(_fx.s,_fx.x-4,_fx.y-4)
 pal()
end

function getsflip(_angle)
 return _angle >= .375 and _angle <= .625
end

-- creators

function getfx(_s,_x,_y,_dur,_colors,_vx,_vy,_ax,_ay)
 return {
  s=_s,
  x=_x,y=_y,
  dur=_dur,durc=_dur,
  colors=_colors,
  vx=_vx or 0,vy=_vy or 0,
  ax=_ax or 0,ay=_ay or 0,
  draw=drawfx,
 }
end

getfirefx_colors=split'14,14,8'
function getfirefx(_x,_y)
 if rnd() > .25 then
  return getfx(
   226,
   _x,_y,
   10,
   getfirefx_colors,
   0,-.0125,
   0,-.0375)
 end
end

----

-- damage,ice,fyre,stun,venom,fear
affliccolors=split'2,12,14,10,11,13'

swordfxcolors={
 split'7,7,7,12,13', -- ice
 split'7,14,15,15,14,14', -- fyre
 split'3,3,3,11,11,10', -- venom
 split'4,4,10,10,10,7', -- stun

-- colors=split'12,11,7,11,12,7', -- teleport
-- colors=split'1,5,5,6,6,7', -- steel
-- colors=split'5,5,13,13,13,14', -- arcane
 -- colors=split'2,2,5,5,5,6', -- mundane
}

icecolor=split'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12'

function missile_update(_attack)
 _attack.x+=cos(_attack.a)*_attack.missile_spd
 _attack.y+=sin(_attack.a)*_attack.missile_spd
end

function stonethrow(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  isenemy=_a.isenemy,
  x=_x,y=_y,
  a=_a.a,
  afflic=1,
  hw=3,hh=3,
  durc=999,
  wallaware=true,
  missile_spd=1.5,
  update=missile_update,
  onmiss=function(_attack)
   add(fxs,getfx(225,_attack.x,_attack.y,3,split'6,5'))
  end,
  draw=function(_attack)
   pal(1,13)
   spr(226,_attack.x-4,_attack.y-4)
   pal()
  end,
  })
end

create_icewall_colors=split'6,6,6,6,6,6,13'
function create_icewall(_a,_x,_y)
 local _dw={
  x=_x+cos(_a.a)*6,y=_y+sin(_a.a)*6,
  hw=4,hh=4,
  }
 add(dynwalls,_dw)
 add(attacks,{
  x=999,y=999,
  durc=120,
  hw=0,hh=0,
  onmiss=function()
   del(dynwalls,_dw)
  end
  })
 add(fxs,getfx(227,_dw.x,_dw.y,120,create_icewall_colors))
end

function sword_iceattack(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  isenemy=_a.isenemy,
  x=_x,y=_y,
  a=_a.a,
  afflic=2,
  hw=4,hh=4,
  durc=2,
  onmiss=function(_attack)
   create_icewall(_attack,_x,_y)
  end,
  })

 add(fxs,getfx(240+atodirections(_a.a)*8,_x,_y,12,swordfxcolors[1]))
end

function addfissure(_x,_y,_dur)
 add(attacks,{
  x=_x,y=_y,
  afflic=3,
  hw=8,hh=8,
  durc=_dur,
  draw=function()
   if rnd() < .5 then
    circfill(_x,_y,5,2)
   end
  end,
  update=function()
   add(fxs,getfirefx(_x-4+rnd(8),_y-4+rnd(8)))
  end,
  })
end

function sword_fireattack(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  x=_x,y=_y,
  a=_a.a,
  afflic=3,
  hw=4,hh=4,
  durc=2,
  onmiss=function(_attack)
   addfissure(_x,_y,80)
  end,
  })

 add(fxs,getfx(240+atodirections(_a.a)*8,_x,_y,12,swordfxcolors[2]))
end

function bow_fireattack(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  x=_x,y=_y,
  a=_a.a,
  afflic=3,
  hw=3,hh=3,
  durc=_a.bow_c,
  wallaware=true,
  missile_spd=2,
  update=missile_update,
  draw=function(_attack)
   pal(1,4)
   spr(248+atodirections(_attack.a)*8,_attack.x-4,_attack.y-4)
   pal()
  end,
  onmiss=function(_attack)
   addfissure(_attack.x,_attack.y,80)
  end,
  })
end

function staff_fireattack(_a)
 _a.staffattack_c+=1
 if _a.staffattack_c >= 16 then
  add(fxs,getfirefx(_a.x-2,_a.y))
  add(fxs,getfirefx(_a.x-1,_a.y))
  add(fxs,getfirefx(_a.x,_a.y))
  _a.staffattack_c=0
  addfissure(_a.x+_a.staffdx-16+rnd(32),_a.y+_a.staffdy-16+rnd(32),80)
 end
end

avatar={
 x=68,y=60,
 a=0,
 hw=1,hh=1,
 ss={
  split'40,41,42,43', -- swordsman
  split'44,45,46,47', -- ranger
  split'48,49,50,51', -- caster
 },
 f=1,
 spd=.5,
 spdfactor=1,
 sflip=nil, -- todo: remove for token hunt
 basecolors=split'15,4,4,4,4,2,13,5',
 hp=5,
 maxhp=5,
 state_c=0,
 draw=drawactor,

 swordattack=sword_iceattack,

 bow_c=0,
 bowattack=bow_fireattack,

 staffattack_c=0,
 staffdx=0,
 staffdy=0,
 staffattack=staff_fireattack,
}
avatar.s=avatar.ss[1]

attacks={}
fxs={}

theme=1

enemybloodcolor=split'8,8,2' -- note: need to be 3

function mapinit()
 actors={}
 walls={}
 dynwalls={}
 for _y=0,15 do
  walls[_y]={}
  for _x=0,15 do
   walls[_y][_x]=1
  end
 end

 local avatarx,avatary=flr(avatar.x/8),flr(avatar.y/8)
 local curx,cury,a,enemy_c,enemies,steps,angles=
  avatarx,avatary,0,10,{},split'440,600,420,600,450'[theme],
   ({split'0,0.25,-0.25',split'0,0,0,0.25,-0.25',split'0,0,0,0,0,0,0,0.5,0.5,0.25,-0.25',
    split'0,0,0,0,0,0,0,0,0,0.25',split'0,0,0.25'})[theme]
 local step_c=steps

 while step_c > 0 do
  a+=angles[flrrnd(#angles)+1]
  local nextx,nexty=curx+cos(a),cury+sin(a)
  
  if nextx > 0 and nextx < 15 and
     nexty > 0 and nexty < 15 then
   if nextx != avatarx or nexty != avatary then
    curx,cury=nextx,nexty
    walls[cury][curx]=0
    if step_c != 0 and step_c % (steps / enemy_c) == 0 then
     add(enemies,{x=curx*8+4,y=cury*8+4})
    end
   end
  end
  step_c-=1
 end

 -- setup enemies
 for _i=1,#enemies do
  local _e=enemies[_i]
  if _i % 3 == 0 then
   add(actors,{
    x=_e.x,y=_e.y,
    a=0,
    hw=1,hh=1,
    dx=0,dy=0,
    spd=.25,spdfactor=1,
    s=split'56,57,58,59',
    f=1,
    attack=sword_iceattack,
    sight=80,
    range=8,
    basecolors=split'12,5,13',
    bloodcolors=enemybloodcolor,
    isenemy=true,
    walking=true,
    hp=12,
    maxhp=12,
    draw=drawactor,
    })

  else
   add(actors,{
    x=_e.x,y=_e.y,
    a=0,
    hw=1,hh=1,
    dx=0,dy=0,
    spd=.375,spdfactor=1,
    s=split'52,53,54,55',
    f=1,
    attack=stonethrow,
    sight=80,
    range=58,
    basecolors=split'12,5,13',
    bloodcolors=enemybloodcolor,
    isenemy=true,
    walking=true,
    hp=6,
    maxhp=6,
    draw=drawactor,
    })
  end
 end

 -- add warpstone
 warpstone={x=curx*8,y=cury*8,dx=0,dy=0,hw=4,hh=4,s=20,spd=0,f=1,
  draw=function(_a) spr(_a.s,_a.x-_a.hw,_a.y-_a.hh) end}
 add(actors,warpstone)

 -- populate actors
 add(actors,avatar)
 -- ...

 -- remove walls around actors
 local _clearingarr=split'-1,-1, 0,-1, 1,-1, -1,0, 0,0, 1,0, -1,1, 0,1, 1,1'
 for _a in all(actors) do
  for _i=1,18,2 do
   local _myx,_myy=flr(_a.x/8)+_clearingarr[_i],flr(_a.y/8)+_clearingarr[_i+1]
   if _myx > 0 and _myx < 15 and
      _myy > 0 and _myy < 15 and walls[_myy][_myx] != 0 then
    walls[_myy][_myx]=0
   end
  end
 end

 del(actors,warpstone)
 walls[cury][curx]=224


 -- todo: start music here
end

function _init()
 mapinit()
end

update60_curenemyi=1
function _update60()

 if avatar.hp <= 0 then
  return -- dead
 end

 if avatar.hp >= 5 then
  avatar.afflic=nil
  avatar.hp=5
 end

 -- todo: the filtering does not seem to work properly!
 local _btnmask=band(btn(),0b1111) -- note: filter out o/x buttons from dpad input
 local _angle=btnmasktoa[_btnmask]
 
 if avatar.afflic != 2 and _angle and type(_angle) == 'number' then
  avatar.a=_angle
  avatar.walking=avatar.state != 'readying' and avatar.state != 'striking'

  if avatar.state != 'striking' then
   if _angle >= .375 and _angle <= .625 then
    avatar.sflip=true
   elseif _angle >= .875 or _angle <= .125 then
    avatar.sflip=nil
   end
  end
 else
  avatar.f,avatar.walking=1
 end

 if avatar.afflic == 2 then
  if btnp(4) or btnp(5) then
   avatar.hp+=0.25
  end
 else

  if btn(4) and btn(5) then
   if avatar.iscasting != true then
    avatar.iscasting=true
    avatar.staffdx,avatar.staffdy=0,0
   end
   if _angle then
    local _castingspeed=.25
    avatar.staffdx+=norm(cos(avatar.a))*_castingspeed
    avatar.staffdy+=norm(sin(avatar.a))*_castingspeed
   end
   avatar.state='readying'
   avatar.state_c=1
   avatar.s=avatar.ss[3]
   avatar.attack=function() end
   avatar.staffattack(avatar)

  elseif btnp(4) then
   avatar.state='readying'
   avatar.state_c=6
   avatar.s=avatar.ss[1]
   avatar.attack=avatar.swordattack
  elseif btn(5) then
   avatar.bow_c+=1
   avatar.state='readying'
   avatar.state_c=1
   avatar.s=avatar.ss[2]
   avatar.attack=avatar.bowattack
  end

  if avatar.state == 'readying' and avatar.state_c <= 0 then
   avatar.state='striking'
   avatar.state_c=28
   avatar.attack(avatar)
   avatar.bow_c=0
   avatar.iscasting=nil
   avatar.ireadyingbow=nil
  elseif avatar.state_c <= 0 then
   avatar.state=nil
  end
 end

 update60_curenemyi+=1
 if update60_curenemyi > #actors then
  update60_curenemyi=1
 end
 local _enemy=actors[update60_curenemyi]
 if _enemy and _enemy.isenemy then
  local _disttoavatar,_haslostoavatar=
   dist(_enemy.x,_enemy.y,avatar.x,avatar.y),
   haslos(_enemy.x,_enemy.y,avatar.x,avatar.y)

  if _enemy.afflic == 1 then
   _enemy.hp+=.0075

  elseif _enemy.afflic == 2 then
   _enemy.hp+=.025

  elseif _enemy.afflic == 3 and _enemy.state == nil then
   _enemy.a+=rnd(.01)-.005
   if rnd() < .05 then
    _enemy.a+=.5
   end
   _enemy.spdfactor=1.5
   _enemy.walking=true

  elseif _enemy.state then
   if _enemy.state == 'readying' and _enemy.state_c <= 0 then
    _enemy.state='striking'
    _enemy.state_c=40

    _enemy.attack(_enemy)
   else
    if _enemy.state_c <= 0 then
     _enemy.state=nil
    end
   end

  elseif _haslostoavatar and _disttoavatar < _enemy.range then
   -- debug('attaack avatar')
   _enemy.targetx,_enemy.targety=avatar.x,avatar.y
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)

   if not _enemy.state then
    _enemy.state='readying'
    _enemy.state_c=36
   end
   
  elseif _haslostoavatar and
    _disttoavatar < _enemy.sight and
    _disttoavatar > _enemy.range then
   -- debug('move towards avatar')
   _enemy.targetx,_enemy.targety=avatar.x,avatar.y
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)
   if _disttoavatar < 6 then
    _enemy.a+=.5
   end
   _enemy.spdfactor=1

  elseif _enemy.wallcollisiondx or _enemy.wallcollisiondy then
   -- debug('move out of wall collision')
   _enemy.a+=.5
   _enemy.targetx=nil

  elseif _enemy.targetx then
   -- debug('move towards target')
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)
   _enemy.spdfactor=1
   local _disttotarget=dist(_enemy.x,_enemy.y,_enemy.targetx,_enemy.targety)
   if _disttotarget < 4 then
    _enemy.targetx=nil
   end

  else -- roam
   -- debug('roam')
   _enemy.a+=rnd(.01)-.005
   _enemy.spdfactor=.25
  end
 end

 -- update actors
 for _a in all(actors) do
  local _spdfactor=_a.spd*(_a.spdfactor or 1)
  local _dx,_dy=0,0

  if _a.walking and _a.afflic != 2 then
   -- set sflip
   _a.sflip=getsflip(_a.a)

   -- set walk frame
   _a.f+=_spdfactor*.375
   if _a.f >= 3 then
    _a.f=1
   end

   -- calc deltas
   if _a == avatar then
    _dx,_dy=norm(cos(_a.a))*_spdfactor,norm(sin(_a.a))*_spdfactor
   else
    _dx,_dy=cos(_a.a)*_spdfactor,sin(_a.a)*_spdfactor
   end

  else
   -- set stand frame
   _a.f=1
  end

  -- update state
  if _a.state then
   _dx,_dy,_a.f=0,0,_a.state == 'readying' and 3 or 4
   _a.state_c-=1
  end

  -- update afflictions
  if _a.afflic and _enemy.hp >= _enemy.maxhp then
   _enemy.afflic=nil
  end
  _a.colors=_a.basecolors
  if _a.afflic == 1 then
   _a.hp+=0.0075
  elseif _a.afflic == 2 then
   _a.colors=icecolor
   _dx,_dy=0,0
  elseif _a.afflic == 3 then
   if _dx == 0 and _dy == 0 then
    _a.hp-=.0125
   else
    _a.hp+=.025
   end
   add(fxs,getfirefx(_a.x-2+rnd(4),_a.y-3+rnd(3)))
  else
   _a.colors=_a.basecolors
  end

  -- movement check against walls
  local _postcolldx,_postcolldy=collideaabbs(isinsidewall,_a,nil,_dx,_dy)
  _a.wallcollisiondx,_a.wallcollisiondy=nil
  if _postcolldx != _dx or _postcolldy != _dy then
   _a.wallcollisiondx,_a.wallcollisiondy=_dx,_dy
  end
  _dx,_dy=_postcolldx,_postcolldy

  -- move
  -- _a.x=mid(0,_a.x+_dx,128)
  -- _a.y=mid(0,_a.y+_dy,128)
  _a.x+=_dx
  _a.y+=_dy

  -- add bleed fx
  if _a.bleeding then
   add(fxs,getfx(
    226,
    _a.x,_a.y,
    4+flrrnd(2),
    {_a.bloodcolors[1]},
    0,0,
    0,.075))
   if rnd() < 0.025 then
    add(fxs,getfx(
     226,
     _a.x,
     _a.y,
     240,
     {_a.bloodcolors[3]}))
   end
  end
 end

 -- update attacks
 for _a in all(attacks) do
  _a.durc-=1

  -- if _a.x <= 0 or _a.x >= 128 or _a.y <= 0 or _a.y >= 128 then
  --  _a.durc=0
  -- end

  if _a.wallaware then
   local _postcolldx,_postcolldy=collideaabbs(isinsidewall,_a,nil,0,0)
   if _postcolldx != 0 or _postcolldy != 0 then
    _a.durc=0
   end
  end

  if _a.durc <= 0 then
   if _a.onmiss then
    _a.onmiss(_a)
   end
   del(attacks,_a)
  elseif _a.isenemy then
   if _a.update then
    _a.update(_a)
   end
   local _dx,_dy=collideaabbs(isaabbscolliding,_a,avatar,0,0)
   if _dx != 0 or _dy != 0 then
    del(attacks,_a)
    avatar.afflic=_a.afflic
    avatar.hp-=1
    add(fxs,getfx(225,_a.x,_a.y,8,split'7'))
   end
  else
   if _a.update then
    _a.update(_a)
   end
   for _e in all(actors) do
    if _e.isenemy then
     local _dx,_dy=collideaabbs(isaabbscolliding,_a,_e,0,0)
     if _dx != 0 or _dy != 0 then
      del(attacks,_a)
      _e.afflic=_a.afflic
      _e.hp-=1
      add(fxs,getfx(225,_a.x,_a.y,8,split'7'))

      if _e.bleeding == nil and _e.hp/_e.maxhp < .5 then
       _e.maxhp*=.5
       _e.bleeding=true
      end

      if _e.bleeding then
       for _i=1,flr((_e.maxhp/2-_e.hp)/2) do
        add(fxs,getfx(
         226,
         _a.x-_a.hw+flrrnd(4),
         _a.y-_a.hh+flrrnd(4),
         16+flrrnd(5),
         _e.bloodcolors,
         cos(_a.a)*.5,
         -.25,
         0,
         .05))
       end
      end
     end
    end
   end
  end
 end

 -- update fxs
 for _fx in all(fxs) do
  if not _fx.durc then
   _fx.durc=_fx.dur
  end

  _fx.vx+=_fx.ax
  _fx.vy+=_fx.ay
  _fx.x+=_fx.vx
  _fx.y+=_fx.vy

  _fx.durc-=1
  if _fx.durc <= 0 then
   del(fxs,_fx)
  end
 end

 -- remove dead actors
 for _a in all(actors) do
  if _a.hp and _a.hp <= 0 or
   _a.x <= 0 or _a.x >= 128 or _a.y <= 0 or _a.y >= 128 then -- note: intentional ice wall kill bug
   del(actors,_a)
  end
 end
end

function _draw()
 cls()

 if avatar.hp < 5 then
  local _clipsize=128*(avatar.hp/5)
  local _y=mid(0,avatar.y-_clipsize/2,128-_clipsize)
  cls(affliccolors[avatar.afflic])
  if avatar.hp <= 0 then
   print('dead',avatar.x-6,avatar.y-4,0)
  end
  clip(mid(0,avatar.x-_clipsize/2,128-_clipsize),_y,_clipsize+1,_clipsize+1)
  rectfill(0,0,128,128,0)
 end

 -- debug draw attacks
 -- for _a in all(attacks) do
 --  rect(_a.x-_a.hw,_a.y-_a.hh,_a.x+_a.hw,_a.y+_a.hh,8)
 --  pset(_a.x,_a.y,8)
 -- end

 -- draw attack areas
 for _attack in all(attacks) do
  if _attack.draw then
   _attack.draw(_attack)
  end
 end

 -- draw walls
 for _y=0,#walls do
  for _x=0,#walls[_y] do
   local spr1=(theme-1)*4
   if walls[_y][_x] != 0 then
    _x8=_x*8
    _y8=_y*8

    if walls[_y][_x] != 1 then
     spr1=walls[_y][_x]
    elseif walls[_y+1] != nil and walls[_y+1][_x] != 1 then
     if (_y + _x) % 7 == 0 then
      spr1+=2
     elseif (_y + _x) % 9 == 0 then
      spr1+=3
     else
      spr1+=1
     end
    end

    spr(spr1,_x8,_y8)
   end
  end
 end

 -- draw things in scene
 local _things=tconcat(actors,fxs)
 sortony(_things)
 for _thing in all(_things) do
  _thing.draw(_thing)
 end

 -- draw actors
 -- sortony(actors)

 -- local _iscollide=isaabbscolliding(avatar,warpstone)

 -- for _a in all(actors) do
 --  _a.draw(_a)

  -- rect(_a.x-_a.hw,_a.y-_a.hh,_a.x+_a.hw,_a.y+_a.hh,_iscollide and 8 or 12)
  -- pset(_a.x,_a.y,7)
  -- pset(_a.x,_a.y+_a.hh,9)
 -- end

 -- draw fxs
 -- sortony(fxs)
 -- for _fx in all(fxs) do
 --  _fx.draw(_fx)
 -- end

 -- debug draw dynwalls
 -- for _dw in all(dynwalls) do
 --  rect(_dw.x-_dw.hw,_dw.y-_dw.hh,_dw.x+_dw.hw,_dw.y+_dw.hh,4)
 --  pset(_dw.x,_dw.y,4)
 -- end

 -- custom pause screen
 if btn(6) then
  cls(2)
 end

end

__gfx__
00dddd0000dddd0000ddd00000000000000000000000000000000000515151501111111111111111111111111111111111111111111111111111111111111111
dddddd00dddddd000ddddd00000ddd00000050000000500000005000515151501111111111111111111111111111111111111111111111111111111111111111
dd5dddd0dd5dddd00ddd5d0000dd6660000551000005510000005000111111111111111111111111111131111111131111111111122122221222442212221222
ddd5d5d0ddd5d5d00d5d5d0000d666d00055511000555110000551005515551511111111dd1ddd1dd31d3d1d3d1d3d1d11111111122122221242e44212221222
0dd55dd00dd55dd000d5dd000dd66ddd000511000005110000551100111111111111111111111111113311111311331111111111122112221242f44212221122
0d0050d00d0050d00005d000d6d66d6d00551110005511100005510015551555111111111ddd1ddd1d3d1ddd13dd13dd11111111111111111122522111111111
0d0050000d005000000500006666d66d055111110551111100551110111111111111111111111111111311111131311111111111221221222214522221212212
000050000000500000050000000000000000200000002000000020005515551511111111dd1ddd1ddd13dd1ddd3d3d1d11111111221221222212212221212212
222222222222222222222222222222220000000000000000000000000e8888000000000000000000000000000000000000000000000000000000000000000000
222222222222222222222222222222220e8888000f9999000e889990e80008800000000000000000000000000000000000000000000000000000000000000000
22222222000000000000000000000500e8000880f9090990e800909988f999900000000000000000000000000000000000000000000000000000000000000000
222222220220222202220022025025228808082099909940880809948f9090990022200000043000000400000000000004444300000110000004300000333000
22222222020022200220002002055220880002209909044088009044099909940200020000234200004430000304030003333200003332000043320003413200
22222222000000000000000000050000022222000444440002224440099090440200200000200100044333000441330003313000000220000013120003312200
22222222220222020002220222025202000000000000000000000000004444400043000000011000003220000233220003133000003442000031300000222000
22222222200220022002200220025002000000000000000000000000000000000033000000000000000200000000000003330000002222000003200000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03332200000004000000030000000400002210000033200003302200033020000000000000000000000033000000000000000400000004000000000000000400
03221200000040000000430000002000044311000224110001231100044030000000103000001030000017000000100000001040000010400000140000001040
03241200030400000004030000030000000031000220110000321000033020000088773000887730008870000088773300067740000677400007774000077740
02111200003000000040200000300000040311000220110000243000023302000088760000887600008870000688700000067400000674000006740000067040
00222000010200000333000002000000040310000220110000321000002201000002620000062600006262006662020000026200000620000002620000026200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000500000000000000000000000000000000000000000000003000000030000000000000000000000000000000000000000000000000000
00005000000050000066650000000050000000000000000000000000000000000003110000031100033111000000000000000000000000000000000000000000
00001500000015000067165000001050000310000003100000301000000001000003110000031100000211000000110000000000000000000000000000000000
00077750000777500006770500077750000121000001210000112000000022100001221000012210000222000000110000000000000000000000000000000000
00067605000676050000700000067650000020000000200000002100000120000002220000022200000222000002220000000000000000000000000000000000
00026200000626000002020000626250000101000000100000010000000001000002020000002000000202000022213300000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00005000000000000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00005500000000000000000000077700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00051500000110000000000000077170000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00055500001111000000000000771770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00515500001111000000100000771770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555500000110000000000007777777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00551550000000000000000077177171000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00555550000000000000000071771711000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000000000000000000000000000000001000010000000000000000001000000000000000000000000000000000000000000000000000000000000000000
00001000000000000000000000000000000010000010000000000000000001000000000000000000000000000000000000000000000000000000000000000000
00001100111100000000000000001111000110000011000010000001000011000000000000000000000000000000000000000000000000000000000000000000
00001100001110000011110000011100000110000011110001111110001111000000000000001000000010000001000000000000000010000000100000010000
00001100000111000111111000111000000110000001110000111100001110000000110000010000000010000000100000001100000100000000100000001000
00011000000110001000000100011000000011000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000
