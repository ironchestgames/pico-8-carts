pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- virtuous vanquisher of evil 2.0-alpha
-- by ironchest games

cartdata'ironchestgames_vvoe2_v1_dev1'

printh('debug started','debug',true)
function debug(s)
 printh(tostr(s),'debug',false)
end

poke(0x5f5c, -1) -- set auto-repeat delay for btnp

btnmasktoa=split'0.5,0,,0.25,0.375,0.125,,0.75,0.625,0.875'
confusedbtnmasktoa=split'0,0.5,,0.75,0.875,0.625,,0.25,0.125,0.375'

-- [0x0001]=0.5, -- left
-- [0x0002]=0, -- right
-- [0x0004]=0.25, -- up
-- [0x0005]=0.375, -- up/left
-- [0x0006]=0.125, -- right/up
-- [0x0008]=0.75, -- down
-- [0x0009]=0.625, -- left/down
-- [0x000a]=0.875, -- down/right

function flrrnd(_n)
 return flr(rnd(_n))
end

function norm(n)
 return n == 0 and 0 or sgn(n)
end

function atodirections(_a)
 return flr((_a%1)*8)/8 -- todo: maybe %1 is not needed
end

function tconcat(_t1,_t2)
 local _t={}
 for _i in all(_t1) do
  add(_t,_i)
 end
 for _i in all(_t2) do
  add(_t,_i)
 end
 return _t
end

-- collision funcs

function isaabbscolliding(a,b)
 return a.x-a.hw < b.x+b.hw and a.x+a.hw > b.x-b.hw and
  a.y-a.hh < b.y+b.hh and a.y+a.hh > b.y-b.hh and b
end

isinsidewall_wallabb={hw=4,hh=4}
function isinsidewall(aabb)
 local x1,y1,x2,y2=
  aabb.x-aabb.hw,aabb.y-aabb.hh,
  aabb.x+aabb.hw,aabb.y+aabb.hh

 for p in all{{x1,y1},{x2,y1},{x2,y2},{x1,y2}} do
  local mapx,mapy=flr(p[1]/8),flr(p[2]/8)
  isinsidewall_wallabb.x,isinsidewall_wallabb.y=mapx*8+isinsidewall_wallabb.hw,mapy*8+isinsidewall_wallabb.hh

  -- note: hitboxes should not be larger than 8x8
  if not walls[mapy] or not walls[mapy][mapx] then
   -- aabb.removeme=true
   debug('warn - inside wall! should not happen')
  elseif walls[mapy][mapx] != 0 and isaabbscolliding(aabb,isinsidewall_wallabb) then
   return isinsidewall_wallabb
  end
 end

 for _dw in all(dynwalls) do
  if isaabbscolliding(aabb,_dw) then
   return _dw
  end
 end
end

collideaabbs_aabb={}
function collideaabbs(_func,_aabb,_other,_dx,_dy)
 local _sgndx,_sgndy=sgn(_dx),sgn(_dy)
 collideaabbs_aabb.x,
 collideaabbs_aabb.y,
 collideaabbs_aabb.hw,
 collideaabbs_aabb.hh=
  _aabb.x+_dx,
  _aabb.y,
  _aabb.hw,
  _aabb.hh

 local _collidedwith=_func(collideaabbs_aabb,_other)
 if _collidedwith then
  _dx=(_aabb.hw+_collidedwith.hw-abs(_aabb.x-_collidedwith.x))*-_sgndx
 end

 collideaabbs_aabb.x,collideaabbs_aabb.y=_aabb.x,_aabb.y+_dy
 _collidedwith=_func(collideaabbs_aabb,_other)
 if _collidedwith then
  _dy=(_aabb.hh+_collidedwith.hh-abs(_aabb.y-_collidedwith.y))*-_sgndy
 end

 return _dx,_dy
end

function dist(x1,y1,x2,y2)
 local dx,dy=x2-x1,y2-y1
 return sqrt(dx*dx+dy*dy)
end

function haslos(_x1,_y1,_x2,_y2)
 local dx,dy,x,y,xinc,yinc=
  abs(_x2-_x1),abs(_y2-_y1),_x1,_y1,sgn(_x2-_x1),sgn(_y2-_y1)
 local n,err=1+dx+dy,dx-dy
 dx*=2
 dy*=2

 while n > 0 do
  n-=1
  if walls[flr(y/8)][flr(x/8)] != 0 then
   return
  end
  if err > 0 then
   x+=xinc
   err-=dy
  else
   y+=yinc
   err+=dx
  end
 end
 return true
end

-- drawing funcs

function sortony(_t)
 for _i=1,#_t do
  local _j=_i
  while _j > 1 and _t[_j-1].y+(_t[_j-1].hh or 4) > _t[_j].y+(_t[_j].hh or 4) do -- todo: make cleaner
   _t[_j],_t[_j-1]=_t[_j-1],_t[_j]
   _j=_j-1
  end
 end
end

function drawactor(_a)
 pal(_a.colors,0)
 spr(_a.s[flr(_a.f)],_a.x-4,_a.y-(8-_a.hh),1,1,_a.sflip)
 pal()
end

function drawfx(_fx)
 pal(1,getfxcolor(_fx))
 spr(_fx.s,_fx.x-4,_fx.y-4)
 pal()
end

function getfxcolor(_fx)
 return _fx.colors[flr(#_fx.colors*((_fx.dur-_fx.durc)/_fx.dur))+1]
end

function getsflip(_angle)
 return _angle >= .375 and _angle <= .625
end

-- creators

function getfx(_s,_x,_y,_dur,_colors,_vx,_vy,_ax,_ay)
 return {
  s=_s,
  x=_x,y=_y,
  dur=_dur,durc=_dur,
  colors=_colors,
  vx=_vx or 0,vy=_vy or 0,
  ax=_ax or 0,ay=_ay or 0,
  draw=drawfx,
 }
end

getfirefx_colors=split'15,14,14,8'
function getfirefx(_x,_y)
 if rnd() > .25 then
  return getfx(
   225,
   _x,_y,
   10,
   getfirefx_colors,
   0,-.0125,
   0,-.0375)
 end
end

----

-- ice,fyre,stun,venom,fear,confusion
affliccolors=split'12,8,10,11,13,14'

swordfxcolors={
 split'7,12,12,13,3', -- ice
 -- split'3,13,12,12,12,7', -- ice
 split'7,14,15,15,14,14', -- fyre
 split'4,4,10,10,10,7', -- stun
 split'3,3,3,11,11,10', -- venom

-- colors=split'12,11,7,11,12,7', -- teleport
-- colors=split'1,5,5,6,6,7', -- steel
-- colors=split'5,5,13,13,13,14', -- arcane
 -- colors=split'2,2,5,5,5,6', -- mundane
}

icecolor=split'12,12,12,12,12,12,12,12,12,12,12,12,12,12,12'

sword_iceattack=function(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  x=_x,y=_y,
  a=_a.a,
  afflic=1,
  hw=4,hh=4,
  durc=2,
  onmiss=function(_attack)
   local _dw={
    x=_x+cos(_attack.a)*6,y=_y+sin(_attack.a)*6,
    hw=4,hh=4,
    }
   add(dynwalls,_dw)
   add(attacks,{
    x=999,y=999,
    durc=120,
    hw=0,hh=0,
    onmiss=function()
     del(dynwalls,_dw)
    end
    })
   add(fxs,getfx(226,_dw.x,_dw.y,120,split'6,6,6,6,6,6,13'))
  end,
  })

 add(fxs,getfx(240+atodirections(_a.a)*8,_x,_y,12,swordfxcolors[1]))
end

sword_fireattack=function(_a)
 local _x,_y=_a.x+cos(_a.a)*6,_a.y-1+sin(_a.a)*6
 add(attacks,{
  x=_x,y=_y,
  a=_a.a,
  afflic=2,
  hw=4,hh=4,
  durc=2,
  onmiss=function(_attack)
   add(attacks,{
    x=_x,y=_y,
    afflic=2,
    hw=8,hh=8,
    durc=80,
    draw=function()
     if rnd() < .5 then
      -- rectfill(_x-4,_y-4,_x+4,_y+4,2)
      circfill(_x,_y,5,2)
     end
    end,
    update=function()
     local _x,_y=_x-4+rnd(8),_y-4+rnd(8)
     add(fxs,getfirefx(_x,_y))
    end,
    })
  end,
  })

 add(fxs,getfx(240+atodirections(_a.a)*8,_x,_y,12,swordfxcolors[2]))
end

avatar={
 x=68,y=60,
 a=0,
 hw=1,hh=1,
 ss={
  split'41,42,43,44', -- swordsman
  split'45,46,47,48', -- ranger
  split'49,50,51,52', -- caster
 },
 f=1,
 spd=.5,
 spdfactor=1,
 sflip=nil, -- todo: remove for token hunt
 -- colors=split'15,4,6,4,4,2,13,5',
 basecolors=split'15,4,4,4,4,2,13,5',
 hp=5,
 maxhp=5,
 state_c=0,
 draw=drawactor,
 swordattack=sword_fireattack,
}
avatar.s=avatar.ss[1]

attacks={}
fxs={}

theme=2

function mapinit()
 actors={}
 walls={}
 dynwalls={}
 for _y=0,15 do
  walls[_y]={}
  for _x=0,15 do
   walls[_y][_x]=1
  end
 end

 local avatarx,avatary=flr(avatar.x/8),flr(avatar.y/8)
 local curx,cury,a,enemy_c,enemies,steps,angles=
  avatarx,avatary,0,10,{},split'440,600,420,600,450'[theme],
   ({split'0,0.25,-0.25',split'0,0,0,0.25,-0.25',split'0,0,0,0,0,0,0,0.5,0.5,0.25,-0.25',
    split'0,0,0,0,0,0,0,0,0,0.25',split'0,0,0.25'})[theme]
 local step_c=steps

 while step_c > 0 do
  a+=angles[flrrnd(#angles)+1]
  local nextx,nexty=curx+cos(a),cury+sin(a)
  
  if nextx > 0 and nextx < 15 and
     nexty > 0 and nexty < 15 then
   if nextx != avatarx or nexty != avatary then
    curx,cury=nextx,nexty
    walls[cury][curx]=0
    if step_c != 0 and step_c % (steps / enemy_c) == 0 then
     add(enemies,{x=curx*8+4,y=cury*8+4})
    end
   end
  end
  step_c-=1
 end

 -- setup enemies
 for _e in all(enemies) do
  add(actors,{
   x=_e.x,y=_e.y,
   a=0,
   hw=1,hh=1,
   dx=0,dy=0,
   spd=.25,spdfactor=1,
   -- s=split'53,54,55,56',
   s=split'57,58,59,60',
   f=1,
   attackafflic=1, -- ice
   basecolors=split'12,5,13',
   bloodcolors=split'8,8,2', -- note: need to be 3
   isenemy=true,
   walking=true,
   hp=8,
   maxhp=8,
   draw=drawactor,
   })
 end

 -- add warpstone
 warpstone={x=curx*8,y=cury*8,dx=0,dy=0,hw=4,hh=4,s=20,spd=0,f=1,
  draw=function(_a) spr(_a.s,_a.x-_a.hw,_a.y-_a.hh) end}
 add(actors,warpstone)

 -- populate actors
 add(actors,avatar)
 -- ...

 -- remove walls around actors
 local _clearingarr=split'-1,-1, 0,-1, 1,-1, -1,0, 0,0, 1,0, -1,1, 0,1, 1,1'
 for _a in all(actors) do
  for _i=1,16,2 do
   local _myx,_myy=flr(_a.x/8)+_clearingarr[_i],flr(_a.y/8)+_clearingarr[_i+1]
   if _myx > 0 and _myx < 15 and
      _myy > 0 and _myy < 15 and walls[_myy][_myx] != 0 then
    walls[_myy][_myx]=0
   end
  end
 end

 del(actors,warpstone)
 walls[cury][curx]=20


 -- todo: start music here
end

function _init()
 mapinit()
end

update60_curenemyi=1
function _update60()

 if avatar.hp <= 0 then
  return -- dead
 end

 if avatar.hp >= 5 then
  avatar.afflic=nil
  avatar.hp=5
 end

 -- todo: the filtering does not seem to work properly!
 local _btnmask=band(btn(),0b1111) -- note: filter out o/x buttons from dpad input
 local _angle=btnmasktoa[_btnmask]
 
 if avatar.afflic != 1 and _angle and type(_angle) == 'number' then
  avatar.a=_angle
  avatar.walking=avatar.state != 'readying' and avatar.state != 'striking'

  if avatar.state != 'striking' then
   if _angle >= .375 and _angle <= .625 then
    avatar.sflip=true
   elseif _angle >= .875 or _angle <= .125 then
    avatar.sflip=nil
   end
  end
 else
  avatar.f,avatar.walking=1
 end

 if avatar.afflic == 1 then
  if btnp(4) or btnp(5) then
   avatar.hp+=0.25
  end
 elseif btnp(4) then
  avatar.state='readying'
  avatar.state_c=6
  avatar.s=avatar.ss[1]
 elseif avatar.state == 'readying' and avatar.state_c <= 0 then
  avatar.state='striking'
  avatar.state_c=28
  avatar.swordattack(avatar)
 elseif avatar.state_c <= 0 then
  avatar.state=nil
 end

 -- if btn(4) or btn(5) then
 --  if avatar.state_c <= 0 then
 --   if avatar.state != 'readying' then
 --    avatar.state='readying'
 --    avatar.state_c=24
 --   elseif avatar.state == 'readying' then
 --    avatar.state='striking'
 --    avatar.state_c=24
 --    add(attacks,{
 --     s=253,
 --     hw=2,hh=3,
 --     x=avatar.x+cos(avatar.a)*6,y=avatar.y-2+sin(avatar.a)*6,
 --     sflip=avatar.sflip,
 --     dur=10,
 --     colors=split'7,6',
 --     dmg=1,
 --     })
 --   end
 --  end
 --  if btn(4) and btn(5) then
 --   avatar.s=avatar.ss[3]
 --  elseif btn(5) then
 --   avatar.s=avatar.ss[2]
 --  elseif btn(4) then
 --   avatar.s=avatar.ss[1]
 --  end
 -- else
 --  avatar.state_c,avatar.state=0
 -- end

 update60_curenemyi+=1
 if update60_curenemyi > #actors then
  update60_curenemyi=1
 end
 local _enemy=actors[update60_curenemyi]
 if _enemy and _enemy.isenemy then
  local _disttoavatar,_haslostoavatar,_enemysight,_enemyrange=
   dist(_enemy.x,_enemy.y,avatar.x,avatar.y),
   haslos(_enemy.x,_enemy.y,avatar.x,avatar.y),
   80,8

  if _enemy.afflic == 1 then
   _enemy.hp+=.025

  elseif _enemy.afflic == 2 then
   _enemy.state=nil
   _enemy.a+=rnd(.01)-.005
   if rnd() < .05 then
    _enemy.a+=.5
   end
   _enemy.spdfactor=1.5
   _enemy.walking=true

  elseif _enemy.state then
   if _enemy.state == 'readying' and _enemy.state_c <= 0 then
    _enemy.state='striking'
    _enemy.state_c=40
    local _dir=atodirections(_enemy.a)
    local _x,_y=_enemy.x+cos(_dir)*6,_enemy.y-1+sin(_dir)*6
    add(attacks,{
     x=_x,y=_y,
     a=_dir,
     hw=2.5,hh=2.5,
     durc=2,
     -- afflic=_enemy.attackafflic,
     afflic=2,
     isenemy=true,
     })
    add(fxs,getfx(240+_dir*8,_x,_y,12,swordfxcolors[1]))
   else
    if _enemy.state_c <= 0 then
     _enemy.state=nil
    end
   end

  elseif _haslostoavatar and _disttoavatar < _enemyrange then
   -- debug('attaack avatar')
   _enemy.targetx,_enemy.targety=avatar.x,avatar.y
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)

   if not _enemy.state then
    _enemy.state='readying'
    _enemy.state_c=36
   end
   
  elseif _haslostoavatar and
    _disttoavatar < _enemysight and
    _disttoavatar > _enemyrange then
   -- debug('move towards avatar')
   _enemy.targetx,_enemy.targety=avatar.x,avatar.y
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)
   if _disttoavatar < 6 then
    _enemy.a+=.5
   end
   _enemy.spdfactor=1

  elseif _enemy.wallcollisiondx or _enemy.wallcollisiondy then
   -- debug('move out of wall collision')
   _enemy.a+=.5
   _enemy.targetx=nil

  elseif _enemy.targetx then
   -- debug('move towards target')
   _enemy.a=atan2(_enemy.targetx-_enemy.x,_enemy.targety-_enemy.y)
   _enemy.spdfactor=1
   local _disttotarget=dist(_enemy.x,_enemy.y,_enemy.targetx,_enemy.targety)
   if _disttotarget < 4 then
    _enemy.targetx=nil
   end

  else -- roam
   -- debug('roam')
   _enemy.a+=rnd(.01)-.005
   _enemy.spdfactor=.25
  end
 end

 -- update actors
 for _a in all(actors) do
  local _spdfactor=_a.spd*(_a.spdfactor or 1)
  local _dx,_dy=0,0

  if _a.walking and _a.afflic != 1 then
   -- set sflip
   _a.sflip=getsflip(_a.a)

   -- set walk frame
   _a.f+=_spdfactor*.375
   if _a.f >= 3 then
    _a.f=1
   end

   -- calc deltas
   if _a == avatar then
    _dx,_dy=norm(cos(_a.a))*_spdfactor,norm(sin(_a.a))*_spdfactor
   else
    _dx,_dy=cos(_a.a)*_spdfactor,sin(_a.a)*_spdfactor
   end

  else
   -- set stand frame
   _a.f=1
  end

  -- update state
  if _a.state then
   _dx,_dy,_a.f=0,0,_a.state == 'readying' and 3 or 4
   _a.state_c-=1
  end

  -- update afflictions
  if _a.afflic and _enemy.hp >= _enemy.maxhp then
   _enemy.afflic=nil
  end
  if _a.afflic == 1 then
   _a.colors=icecolor
   _dx,_dy=0,0
  elseif _a.afflic == 2 then
   if _dx == 0 and _dy == 0 then
    _a.hp-=.0125
   else
    _a.hp+=.025
   end
   add(fxs,getfirefx(_a.x-2+rnd(4),_a.y-3+rnd(3)))
  else
   _a.colors=_a.basecolors
  end

  -- movement check against walls
  local _postcolldx,_postcolldy=collideaabbs(isinsidewall,_a,nil,_dx,_dy)
  _a.wallcollisiondx,_a.wallcollisiondy=nil
  if _postcolldx != _dx or _postcolldy != _dy then
   _a.wallcollisiondx,_a.wallcollisiondy=_dx,_dy
  end
  _dx,_dy=_postcolldx,_postcolldy

  -- move
  -- _a.x=mid(0,_a.x+_dx,128)
  -- _a.y=mid(0,_a.y+_dy,128)
  _a.x+=_dx
  _a.y+=_dy

  -- add bleed fx
  if _a.bleeding then
   add(fxs,getfx(
    225,
    _a.x,_a.y,
    4+flrrnd(2),
    {_a.bloodcolors[1]},
    0,0,
    0,.075))
   if rnd() < 0.025 then
    add(fxs,getfx(
     225,
     _a.x,
     _a.y,
     240,
     {_a.bloodcolors[3]}))
   end
  end
 end

 -- update attacks
 for _a in all(attacks) do
  _a.durc-=1
  if _a.durc <= 0 then
   if _a.onmiss then
    _a.onmiss(_a)
   end
   del(attacks,_a)
  elseif _a.isenemy then
   if _a.update then
    _a.update(_a)
   end
   local _dx,_dy=collideaabbs(isaabbscolliding,_a,avatar,0,0)
   if _dx != 0 or _dy != 0 then
    del(attacks,_a)
    avatar.afflic=_a.afflic
    avatar.hp-=1
    add(fxs,getfx(224,_a.x,_a.y,8,split'7'))
   end
  else
   if _a.update then
    _a.update(_a)
   end
   for _e in all(actors) do
    if _e.isenemy then
     local _dx,_dy=collideaabbs(isaabbscolliding,_a,_e,0,0)
     if _dx != 0 or _dy != 0 then
      del(attacks,_a)
      _e.afflic=_a.afflic
      _e.hp-=1
      add(fxs,getfx(224,_a.x,_a.y,8,split'7'))

      if _e.bleeding == nil and _e.hp/_e.maxhp < .5 then
       _e.maxhp*=.5
       _e.bleeding=true
      end

      if _e.bleeding then
       for _i=1,flr((_e.maxhp/2-_e.hp)/2) do
        add(fxs,getfx(
         225,
         _a.x-_a.hw+flrrnd(4),
         _a.y-_a.hh+flrrnd(4),
         16+flrrnd(5),
         _e.bloodcolors,
         cos(_a.a)*.5,
         -.25,
         0,
         .05))
       end
      end
     end
    end
   end
  end
 end

 -- update fxs
 for _fx in all(fxs) do
  if not _fx.durc then
   _fx.durc=_fx.dur
  end

  _fx.vx+=_fx.ax
  _fx.vy+=_fx.ay
  _fx.x+=_fx.vx
  _fx.y+=_fx.vy

  _fx.durc-=1
  if _fx.durc <= 0 then
   del(fxs,_fx)
  end
 end

 -- remove dead actors
 for _a in all(actors) do
  if _a.hp and _a.hp <= 0 or
   _a.x <= 0 or _a.x >= 128 or _a.y <= 0 or _a.y >= 128 then -- note: intentional ice wall kill bug
   del(actors,_a)
  end
 end
end

function _draw()
 cls()

 if avatar.hp < 5 then
  local _clipsize=128*(avatar.hp/5)
  local _y=mid(0,avatar.y-_clipsize/2,128-_clipsize)
  cls(affliccolors[avatar.afflic])
  if avatar.hp <= 0 then
   print('dead',avatar.x-6,avatar.y-4,0)
  end
  clip(mid(0,avatar.x-_clipsize/2,128-_clipsize),_y,_clipsize+1,_clipsize+1)
  rectfill(0,0,128,128,0)
 end

 -- draw attack areas
 for _attack in all(attacks) do
  if _attack.draw then
   _attack.draw(_attack)
  end
 end

 -- draw walls
 for _y=0,#walls do
  for _x=0,#walls[_y] do
   local spr1=(theme-1)*4
   if walls[_y][_x] != 0 then
    _x8=_x*8
    _y8=_y*8

    if walls[_y][_x] != 1 then
     spr1=walls[_y][_x]
    elseif walls[_y+1] != nil and walls[_y+1][_x] != 1 then
     if (_y + _x) % 7 == 0 then
      spr1+=2
     elseif (_y + _x) % 9 == 0 then
      spr1+=3
     else
      spr1+=1
     end
    end

    spr(spr1,_x8,_y8)
   end
  end
 end

 -- draw things in scene
 local _things=tconcat(actors,fxs)
 sortony(_things)
 for _thing in all(_things) do
  _thing.draw(_thing)
 end

 -- draw actors
 -- sortony(actors)

 -- local _iscollide=isaabbscolliding(avatar,warpstone)

 -- for _a in all(actors) do
 --  _a.draw(_a)

  -- rect(_a.x-_a.hw,_a.y-_a.hh,_a.x+_a.hw,_a.y+_a.hh,_iscollide and 8 or 12)
  -- pset(_a.x,_a.y,7)
  -- pset(_a.x,_a.y+_a.hh,9)
 -- end

 -- draw fxs
 -- sortony(fxs)
 -- for _fx in all(fxs) do
 --  _fx.draw(_fx)
 -- end

 -- debug draw attacks
 -- for _a in all(attacks) do
 --  rect(_a.x-_a.hw,_a.y-_a.hh,_a.x+_a.hw,_a.y+_a.hh,8)
 --  pset(_a.x,_a.y,8)
 -- end

 -- debug draw dynwalls
 -- for _dw in all(dynwalls) do
 --  rect(_dw.x-_dw.hw,_dw.y-_dw.hh,_dw.x+_dw.hw,_dw.y+_dw.hh,4)
 --  pset(_dw.x,_dw.y,4)
 -- end

 -- custom pause screen
 if btn(6) then
  cls(2)
 end

end

__gfx__
00dddd0000dddd0000ddd00000000000000000000000000000000000515151501111111111111111111111111111111111111111111111111111111111111111
dddddd00dddddd000ddddd00000ddd00000050000000500000005000515151501111111111111111111111111111111111111111111111111111111111111111
dd5dddd0dd5dddd00ddd5d0000dd6660000551000005510000005000111111111111111111111111111131111111131111111111122122221222442212221222
ddd5d5d0ddd5d5d00d5d5d0000d666d00055511000555110000551005515551511111111dd1ddd1dd31d3d1d3d1d3d1d11111111122122221242e44212221222
0dd55dd00dd55dd000d5dd000dd66ddd000511000005110000551100111111111111111111111111113311111311331111111111122112221242f44212221122
0d0050d00d0050d00005d000d6d66d6d00551110005511100005510015551555111111111ddd1ddd1d3d1ddd13dd13dd11111111111111111122522111111111
0d0050000d005000000500006666d66d055111110551111100551110111111111111111111111111111311111131311111111111221221222214522221212212
000050000000500000050000000000000000200000002000000020005515551511111111dd1ddd1ddd13dd1ddd3d3d1d11111111221221222212212221212212
22222222222222222222222222222222000050000000000000000000000000000e88880000000000000000000000000000000000000000000000000000000000
22222222222222222222222222222222000055000e8888000f9999000e889990e800088000000000000000000000000000000000000000000000000000000000
2222222200000000000000000000050000051500e8000880f9090990e800909988f9999000000000000000000000000000000000000000000000000000000000
22222222022022220222002202502522000555008808082099909940880809948f90909900222000000430000004000000000000044443000001100000043000
22222222020022200220002002055220005155008800022099090440880090440999099402000200002342000044300003040300033332000033320000433200
22222222000000000000000000050000005555000222220004444400022244400990904402002000002001000443330004413300033130000002200000131200
22222222220222020002220222025202005515500000000000000000000000000044444000430000000110000032200002332200031330000034420000313000
22222222200220022002200220025002005555500000000000000000000000000000000000330000000000000002000000000000033300000022220000032000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00333000033322000000040000000300000004000022100000332000033022000330200000000000000000000000330000000000000004000000040000000000
03413200032212000000400000004300000020000443110002241100012311000440300000001030000010300000170000001000000010400000104000001400
03312200032412000304000000040300000300000000310002201100003210000330200000887730008877300088700000887733000677400006774000077740
00222000021112000030000000402000003000000403110002201100002430000233020000887600008876000088700006887000000674000006740000067400
00000000002220000102000003330000020000000403100002201100003210000022010000026200000626000062620066620200000262000006200000026200
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000005000000000000000000000000000000000000000000000300000003000003311000000000000000000000000000000000000
00000400000050000000500000666500000000500000000000000000000033000000000000311000003110000021100000011000000000000000000000000000
00001040000015000000150000671650000010500000103000001030000011000000100000311000003110000021100000011000000000000000000000000000
00077740000777500007775000067705000777500001213000012130000120000001213300122100001221000022200000222000000000000000000000000000
00067040000676050006760500007000000676500000200000002000000020000000200000222000002220000022200000211330000000000000000000000000
00026200000262000006260000020200006262500001010000001000000101000001010000202000000200000020200002202000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000007770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000007717000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111100000000000077177000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00111100000010000077177000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00011000000000000777777700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007717717100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000007177171100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00010000000000000000000000000000000001000010000000000000000001000000000000000000000000000000000000000000000000000000000000000000
00001000000000000000000000000000000010000010000000000000000001000000000000000000000000000000000000000000000000000000000000000000
00001100111100000000000000001111000110000011000010000001000011000000000000000000000000000000000000000000000000000000000000000000
00001100001110000011110000011100000110000011110001111110001111000000000000000000000000000000000000000000000000000000000000000000
00001100000111000111111000111000000110000001110000111100001110000000000000000000000000000000000000000000000000000000000000000000
00011000000110001000000100011000000011000000100000000000000100000000000000000000000000000000000000000000000000000000000000000000
